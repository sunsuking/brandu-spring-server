buildscript {
    ext {
        restdocsApiSpecVersion = '0.18.2'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'io.sentry.jvm.gradle' version '4.4.1'
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
}


group = 'shop.brandu'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

sentry {
    includeSourceContext = true

    org = "minjunsu"
    projectName = "brandu"
    authToken = System.getenv("SENTRY_AUTH_TOKEN")
}

openapi3 {
    server = 'https://localhost:8080'
    title = 'Brandu API Documentation'
    description = '브랜뉴 API 문서입니다.'
    version = '0.1.0'
    format = 'yaml'
}

dependencies {
    // Spring Boot 기본
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Spring Boot 인증
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Spring Boot 데이터베이스
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    // Spring Boot 캐시 데이터베이스
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Spring Boot 개발 도구
    compileOnly 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    implementation 'com.google.code.gson:gson:2.9.0'

    // Spring Boot SMTP & 템플릿용 Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    // Spring Rest Docs + OpenAPI 3.0 + REST Assured
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    testImplementation "com.epages:restdocs-api-spec-restassured:${restdocsApiSpecVersion}"
    testImplementation 'io.rest-assured:rest-assured'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation "org.testcontainers:junit-jupiter:1.19.0"
}

tasks.register('openapi3Generate') {
    dependsOn openapi3
    delete('src/main/resources/static/swagger-ui/openapi3.yaml')
    copy {
        from(layout.buildDirectory.dir("api-spec").get().file("openapi3.yaml"))
        into 'src/main/resources/static/swagger-ui'
        rename { 'openapi3.yaml' }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}